---
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";

interface Props {
  games: CollectionEntry<"pastRun">["data"]["games"];
}

const { games } = Astro.props;

function chunkArray(arr: typeof games, size: number) {
  return Array.from({ length: Math.ceil(arr.length / size) }, (_, i) =>
    arr.slice(i * size, i * size + size)
  );
}

const chunkedGames = chunkArray(games, 6);
---

<div class="games-carousel relative py-5">
  <div class="embla" id="gamesCarousel">
    <div class="embla__container py-3">
      {
        chunkedGames.map((chunk) => (
          <div class="embla__slide px-3">
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-x-4 gap-y-6">
              {chunk.map((game) => (
                <a
                  href={game.link}
                  target="_blank"
                  class="block bg-white rounded-lg overflow-hidden shadow hover:shadow-xl transition-all duration-300"
                >
                  <div class="aspect-square bg-gray-200">
                    <Image
                      src={game.image}
                      alt={game.title}
                      class="w-full h-full object-cover"
                      loading="lazy"
                    />
                  </div>
                  <div class="p-3">
                    <h3 class="font-semibold text-center">{game.title}</h3>
                  </div>
                </a>
              ))}
            </div>
          </div>
        ))
      }
    </div>
  </div>
  <button
    class="embla__prev absolute -left-3 md:-left-6 lg:-left-10 top-1/2 -translate-y-1/2 bg-white cursor-pointer hover:text-white transition text-xl md:text-3xl rounded-full size-12 hover:bg-brown grid place-items-center shadow-lg z-10 disabled:shadow-none disabled:opacity-50 disabled:cursor-not-allowed"
    aria-label="Prev Slide"
  >
    <Icon name="chevron-left" />
  </button>
  <button
    class="embla__next absolute -right-3 md:-right-6 lg:-right-10 top-1/2 -translate-y-1/2 bg-white cursor-pointer hover:text-white transition text-xl md:text-3xl rounded-full size-12 hover:bg-brown grid place-items-center shadow-lg z-10 disabled:shadow-none disabled:opacity-50 disabled:cursor-not-allowed"
    aria-label="Next Slide"
  >
    <Icon name="chevron-right" />
  </button>
</div>

<style>
  .embla {
    max-width: 70rem;
    margin: auto;
    overflow: hidden;
    position: relative;
  }
  .embla__container {
    display: flex;
  }
  .embla__slide {
    flex: 0 0 100%;
    box-sizing: border-box;
  }
</style>

<script>
  import EmblaCarousel from "embla-carousel";
  import { type EmblaCarouselType } from "embla-carousel";

  const addTogglePrevNextBtnsActive = (
    emblaApi: EmblaCarouselType,
    prevBtn: HTMLElement,
    nextBtn: HTMLElement
  ): (() => void) => {
    const togglePrevNextBtnsState = (): void => {
      if (emblaApi.canScrollPrev()) prevBtn.removeAttribute("disabled");
      else prevBtn.setAttribute("disabled", "disabled");

      if (emblaApi.canScrollNext()) nextBtn.removeAttribute("disabled");
      else nextBtn.setAttribute("disabled", "disabled");
    };

    emblaApi
      .on("select", togglePrevNextBtnsState)
      .on("init", togglePrevNextBtnsState)
      .on("reInit", togglePrevNextBtnsState);

    return (): void => {
      prevBtn.removeAttribute("disabled");
      nextBtn.removeAttribute("disabled");
    };
  };

  export const addPrevNextBtnsClickHandlers = (
    emblaApi: EmblaCarouselType,
    prevBtn: HTMLElement,
    nextBtn: HTMLElement
  ): (() => void) => {
    const scrollPrev = (): void => {
      emblaApi.scrollPrev();
    };
    const scrollNext = (): void => {
      emblaApi.scrollNext();
    };
    prevBtn.addEventListener("click", scrollPrev, false);
    nextBtn.addEventListener("click", scrollNext, false);

    const removeTogglePrevNextBtnsActive = addTogglePrevNextBtnsActive(
      emblaApi,
      prevBtn,
      nextBtn
    );

    return (): void => {
      removeTogglePrevNextBtnsActive();
      prevBtn.removeEventListener("click", scrollPrev, false);
      nextBtn.removeEventListener("click", scrollNext, false);
    };
  };
  document.addEventListener("astro:page-load", () => {
    const section = document.querySelector(".games-carousel")!;
    const gamesCarouselNode = document.getElementById("gamesCarousel");
    if (gamesCarouselNode && typeof EmblaCarousel !== "undefined") {
      const embla = EmblaCarousel(gamesCarouselNode, {
        loop: false,
        align: "start",
        slidesToScroll: 1,
      });

      const prevBtn = section.querySelector<HTMLElement>(".embla__prev");
      const nextBtn = section.querySelector<HTMLElement>(".embla__next");
      const removePrevNextBtnsClickHandlers = addPrevNextBtnsClickHandlers(
        embla,
        prevBtn!,
        nextBtn!
      );

      embla.on("destroy", removePrevNextBtnsClickHandlers);
    }
  });
</script>
